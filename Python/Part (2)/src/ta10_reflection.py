# -*- coding: utf-8 -*-
"""TA 10 - Reflection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/157S1jLp_xeohbvLMfsEzrrmz1O3-rV5P

## 1. Inspecting Class Information:


In this example, ```dir(Pizza)``` returns a list of attributes of the Pizza class, including methods and other attributes.
"""

class Pizza:
    def __init__(self, size, toppings):
        self.size = size
        self.toppings = toppings

# Using dir() to inspect class information
attributes = dir(Pizza)
print("Attributes of Pizza class:", attributes)

"""## 2. Instantiating Objects Dynamically:

In this example, ```globals()[class_name]``` retrieves the class object dynamically using the class name stored in the ```class_name``` variable, and then the instance is created using ```()```.



"""

class Pizza:
    def __init__(self, size, toppings):
        self.size = size
        self.toppings = toppings

# Dynamically creating an instance of Pizza
class_name = "Pizza"
size = "Large"
toppings = ["Cheese", "Pepperoni"]
obj = globals()[class_name](size, toppings)

print("Size:", obj.size)
print("Toppings:", obj.toppings)

"""## 3. Invoking Methods Dynamically:

In this example, ```getattr(person, method_name)``` retrieves the method object dynamically from the ```person``` instance using the method name stored in the ```method_name``` variable, and then the method is called using ```()```.


"""

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        print(f"Hello, my name is {self.name} and I am {self.age} years old.")

# Creating an instance of Person
person = Person("Alice", 30)

# Dynamically calling the greet method
method_name = "greet"
method = getattr(person, method_name)
method()

